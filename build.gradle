ext.gradleSettingsDir = "${rootProject.projectDir}/gradle"
String javaLanguageLevel = "1.8"

allprojects {
  apply plugin: 'idea'

  repositories {
    mavenCentral()
    maven {
      url "http://bits.netbeans.org/maven2"
    }
    maven {
      url "http://essi-lab.eu/nexus/content/groups/open.repos"
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'

  eclipse {
    jdt {
      sourceCompatibility = javaLanguageLevel
      targetCompatibility = javaLanguageLevel
    }
    classpath {
      downloadSources = true
      downloadJavadoc = true
    }
  }

  // Include project specific settings
  task eclipseSettings(type: Copy) {
    from rootProject.files("$gradleSettingsDir/org.eclipse.jdt.ui.prefs")
    into project.file('.settings/')
  }

  task eclipseJdtPrepare(type: Copy) {
    from rootProject.file("$gradleSettingsDir/org.eclipse.jdt.core.prefs")
    into project.file(".settings/")
  }

  task cleanEclipseJdtUi(type: Delete) {
    delete project.file(".settings/org.eclipse.jdt.ui.prefs");
  }

  tasks["eclipseJdt"].dependsOn(eclipseJdtPrepare)
  tasks["cleanEclipse"].dependsOn(cleanEclipseJdtUi)
  tasks["eclipse"].dependsOn(eclipseSettings)

  jar {
    manifest.attributes provider: 'gradle'
  }
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }

  project {
    languageLevel = javaLanguageLevel

    ipr {
      withXml { xmlProvider ->
        // Get root node.
        def project = xmlProvider.asNode()
        customizeIdeaCodeSyle project
      }
    }
  }
}


// =========== IntelliJ settings ===========
def customizeIdeaCodeSyle(project) {
  project.appendNode('component', [name: 'ProjectCodeStyleSettingsManager'])
  def codeStyleNode = findComponent(project, 'ProjectCodeStyleSettingsManager')

  codeStyleNode.appendNode('option', [name: 'USE_PER_PROJECT_SETTINGS', value: 'true'])
  def projectSettingsNode = codeStyleNode.appendNode('option', [name: 'PER_PROJECT_SETTINGS']).appendNode('value')

  def codeStyleUrl = rootProject.file("$gradleSettingsDir/idea_code_style_prefs.xml").toURL()

  def codeStyleXml = new XmlParser().parseText(codeStyleUrl.text)
  codeStyleXml.children().each { option ->
      codeStyleNode.append(option)
  }
}

/* Search component with given name */
def findComponent(project, name) {
  project.component.find { it.@name == name }
}
